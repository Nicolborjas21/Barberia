/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;

import Conexion.Conexion;
// import Modelos.ModeloProveedores;
import java.util.ArrayList;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.*;
import Clases.Proveedor;
import Conexion.ModeloProveedores;
import static Vistas.MostrarCompras.totalPages;
import javax.swing.JTextField;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import java.util.Calendar;



/**
 *
 * @author PC
 */
public class Devoluciones extends javax.swing.JFrame {
    public int numeroDeFilas;
    Conexion enlace = new Conexion();
    Connection conection = enlace.getConexion();
    
    //Variables para calcular el total de la factura
    //para poner publico el nombre del proveedor
    static  String proveedorSeleccionadoNombre;
    private int paginaActual = 1;
    
  

   
    public Devoluciones(int numeroDeFilas) {
        initComponents();
        this.numeroDeFilas = numeroDeFilas; // Almacena el número de filas en una variable de instancia
        // Configura el valor del campo txt_Id
        txt_Id.setText(String.valueOf(numeroDeFilas + 1));
        
        //para llenar el id y el nombre del proveedor al boton de seleccion desplegable
//        llenarProveedor();
        
        
        //Inicializando la variable para calcular el total de la factura
        //totalFactura = 0.0;     
          DefaultTableModel model = (DefaultTableModel) tblProductosCompras.getModel();

        model.addTableModelListener(e -> {
            calcularTotalFactura();
        });

    }  
    
    
 
//    //metodo para poder traer el id y el nombre del proveedor
//    public void llenarProveedor(){
//        ModeloProveedores modProv = new ModeloProveedores();
//        ArrayList<Proveedor> listaProveedores = modProv.getProveedor();
//        int proveedorSeleccionadoId = 0;
//        proveedorSeleccionadoNombre = "Nose";
//        
//        Proveedores.removeAllItems();
//        
//        for(int i = 0; i < listaProveedores.size(); i++ ){
//            Proveedores.addItem(new Proveedor(listaProveedores.get(i).getId(),
//                    listaProveedores.get(i).getNombre()));
//            
//            int indiceSeleccionado = Proveedores.getSelectedIndex();
//            
//            if (indiceSeleccionado == i) {
//                // Guardar el ID del proveedor seleccionado
//                proveedorSeleccionadoId = listaProveedores.get(i).getId();
//                proveedorSeleccionadoNombre = listaProveedores.get(i).getNombre();
//            }
//        }    
//    }
//    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        txt_Id = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        numeroFactura = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        CAI = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btnEliminarP = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblProductosCompras = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        TxtCliente = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        Fecha = new com.toedter.calendar.JDateChooser();
        btnGuardar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        btncancelar = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(916, 454));

        txt_Id.setEditable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Devoluciones");

        jLabel2.setText("No. de Factura:");

        numeroFactura.setEditable(false);
        try {
            numeroFactura.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-###-##-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        numeroFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numeroFacturaActionPerformed(evt);
            }
        });
        numeroFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numeroFacturaKeyTyped(evt);
            }
        });

        jLabel5.setText("Fecha:");

        CAI.setEditable(false);
        try {
            CAI.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#UU#U#-##U#U#-U###UU-U##U#U-U#UU#U-#U")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        CAI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CAIActionPerformed(evt);
            }
        });
        CAI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CAIKeyTyped(evt);
            }
        });

        jLabel6.setText("CAI:");

        jLabel9.setText("Productos a devolver: ");

        jSeparator2.setForeground(new java.awt.Color(0, 0, 153));

        btnEliminarP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cancelarr.png"))); // NOI18N
        btnEliminarP.setText("Eliminar producto");
        btnEliminarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPActionPerformed(evt);
            }
        });

        jSeparator3.setForeground(new java.awt.Color(0, 0, 153));

        tblProductosCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre del producto", "Marca", "Presentación", "Cantidad", "Precio", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblProductosCompras);

        jLabel3.setText("Total: ");

        TxtCliente.setEditable(false);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jLabel11.setText("Cliente:");

        Fecha.setToolTipText("");
        Fecha.setDateFormatString("yyyy/MM/dd");
        Fecha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FechaKeyTyped(evt);
            }
        });

        btnGuardar.setBackground(new java.awt.Color(253, 253, 253));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reembolso.png"))); // NOI18N
        btnGuardar.setText("Renvolsar");
        btnGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnGuardarMouseEntered(evt);
            }
        });
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel8.setText("Descripción:");

        btncancelar.setBackground(new java.awt.Color(253, 253, 253));
        btncancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/volver.png"))); // NOI18N
        btncancelar.setText("Cancelar");
        btncancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(98, 98, 98)
                        .addComponent(txt_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(260, 260, 260))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel11))
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(numeroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CAI, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(TxtCliente, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(Fecha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(229, 229, 229))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btncancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnEliminarP))))
                            .addComponent(jSeparator2))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel2))
                            .addComponent(numeroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CAI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TxtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(12, 12, 12)))
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminarP)
                    .addComponent(jLabel9))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGuardar)
                            .addComponent(btncancelar)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)))
                .addGap(15, 15, 15))
        );

        CAI.getAccessibleContext().setAccessibleParent(CAI);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblProductosCompras.getModel();
        int selectedRow = tblProductosCompras.getSelectedRow();

        if (selectedRow != -1) {
            // Si hay una fila seleccionada, elimina solo esa fila
            model.removeRow(selectedRow);
        } else {
            // Si no hay fila seleccionada, preguntar al usuario si quiere borrar todo
            int response = JOptionPane.showConfirmDialog(null, "¿Desea eliminar todas las filas?", "Confirmar", JOptionPane.YES_NO_OPTION);

            if (response == JOptionPane.YES_OPTION) {
                // Si el usuario elige "Sí", elimina todas las filas
                int rowCount = model.getRowCount();
                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }
            } else if (response == JOptionPane.NO_OPTION) {
                // Si el usuario elige "No", informar que debe seleccionar una fila para eliminar
                JOptionPane.showMessageDialog(null, "Por favor, seleccione un producto para eliminar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
            // Si el usuario elige "No" o cierra la ventana de confirmación, no se hace nada.
        }
    }//GEN-LAST:event_btnEliminarPActionPerformed

    private void CAIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CAIKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_CAIKeyTyped

    private void CAIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CAIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CAIActionPerformed

    private void numeroFacturaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroFacturaKeyTyped
        // TODO add your handling code here:
        char validar= evt.getKeyChar();
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_numeroFacturaKeyTyped

    private void numeroFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numeroFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numeroFacturaActionPerformed

    private void btncancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btncancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        //Guardar factura en la base de datos
        //variable que guarda la fecha
        String fcha = ((JTextField)Fecha.getDateEditor().getUiComponent()).getText();
        // Obtener el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tblProductosCompras.getModel();
        String TipoDeCompra ="Al contado";
        //validaciones
        if(numeroFactura.getText().equals("   -   -  -   ") || CAI.getText().equals("      -      -      -      -      -  " )||Fecha.getDate()==(null))
        {
            JOptionPane.showMessageDialog(null,"Hay datos vacios","Error al guardar",JOptionPane.WARNING_MESSAGE);
        }else if(numeroFactura.getText().equals("000-000-00-000")){
            JOptionPane.showMessageDialog(null,"datos de numero de factura","Error al guardar ",JOptionPane.WARNING_MESSAGE);
        }else if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay registros en la tabla para guardar", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                PreparedStatement guardarCP = conection.prepareStatement("INSERT INTO comprasproductos(numeroFactura,cai,proveedor,tipoDeCompra,fecha,total)VALUES(?,?,?,?,?,?)");
                guardarCP.setString(1,numeroFactura.getText());
                guardarCP.setString(2,CAI.getText());
//                Proveedor proveedorSeleccionado = (Proveedor) Proveedores.getSelectedItem();
//                if (proveedorSeleccionado != null) {
//                    int proveedorSeleccionadoId = proveedorSeleccionado.getId();
//                    guardarCP.setInt(3, proveedorSeleccionadoId);
//                }
                guardarCP.setString(4,TipoDeCompra);
                guardarCP.setString(5, fcha);
                guardarCP.setDouble(6,totalFactura);
                guardarCP.executeUpdate();
                for (int i = 0; i < model.getRowCount(); i++) {
                    // Obtener los datos de la fila actual
                    int idCompra = Integer.parseInt(txt_Id.getText());
                    String producto = model.getValueAt(i, 0).toString();
                    String Marca = model.getValueAt(i, 1).toString();
                    String presentacion = model.getValueAt(i, 2).toString();
                    int cantidad = Integer.parseInt(model.getValueAt(i, 3).toString());
                    double precio = Double.parseDouble(model.getValueAt(i, 4).toString());

                    try {
                        PreparedStatement guardarDC = conection.prepareStatement("INSERT INTO detallecompra(idCompra,producto,cantidad,tipoProducto,precio)VALUES(?,?,?,?,?)");
                        // Insertar los datos en la base de datos (personaliza la sentencia SQL)
                        guardarDC.setInt(1, idCompra);
                        guardarDC.setString(2, producto);
                        guardarDC.setInt(3, cantidad);
                        guardarDC.setString(4, presentacion);
                        guardarDC.setDouble(5, precio);
                        guardarDC.executeUpdate();
                        //this.dispose();
                        JOptionPane.showMessageDialog(null, "Factura guardada");
                        Controlador.ComprasProducto.MostrarCompras("", paginaActual, totalPages);
                        // Limpia la tabla después de guardar los registros
                        model.setRowCount(0);
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "Error al guardar el registro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    try {
                        PreparedStatement guardarIP = conection.prepareStatement("INSERT INTO inventarioproductos(Producto,Marca,tipoProducto,Cantidad,Precio)VALUES(?,?,?,?,?)");
                        // Insertar los datos en la base de datos (personaliza la sentencia SQL)
                        guardarIP.setString(1, producto);
                        guardarIP.setString(2, Marca);
                        guardarIP.setString(3, presentacion);
                        guardarIP.setInt(4, cantidad);
                        guardarIP.setDouble(5, precio);
                        guardarIP.executeUpdate();
                        this.dispose();
                        Controlador.ComprasProducto.MostrarCompras("", paginaActual, totalPages);
                        // Limpia la tabla después de guardar los registros
                        model.setRowCount(0);
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "Error al guardar el registro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null,"error al registrar la factura Ya existe una factura con estos datos"+e,"No se guardo ",
                    JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGuardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardarMouseEntered
        // TODO add your handling code here:
        //cambiar el color del boton
        //btnGuardar.setBackground(new Color(135, 206, 235));
    }//GEN-LAST:event_btnGuardarMouseEntered

    private void FechaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FechaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FechaKeyTyped
    private double totalFactura = 0.0;

    private void calcularTotalFactura() {
        DefaultTableModel model = (DefaultTableModel) tblProductosCompras.getModel();
        totalFactura = 0.0;

        for (int i = 0; i < model.getRowCount(); i++) {
            double subtotal = Double.parseDouble(model.getValueAt(i, 5).toString());
            totalFactura += subtotal;
        }

        jLabel3.setText("Total: " + totalFactura);
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField CAI;
    private com.toedter.calendar.JDateChooser Fecha;
    private javax.swing.JTextField TxtCliente;
    private javax.swing.JButton btnEliminarP;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btncancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JFormattedTextField numeroFactura;
    public static javax.swing.JTable tblProductosCompras;
    public static javax.swing.JTextField txt_Id;
    // End of variables declaration//GEN-END:variables

   
}
